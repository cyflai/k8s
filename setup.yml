---
- hosts: all
  tasks:
   
  - name: install docker.io
    apt: 
      name: docker.io
      update_cache: yes
      state: present

  - name: ensure same cgroup
    shell: |
           cat << EOF > /etc/docker/daemon.json
           {
            "exec-opts": ["native.cgroupdriver=systemd"]
           }
           EOF

  - name: install apt-transport-https
    apt:
      name: apt-transport-https
      update_cache: yes
      state: present

  - name: add key
    apt_key: 
      url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
      state: present

  - apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    tags: abc

  - name: install kubelet kubeadm kubectl
    apt:
      name: "{{ item }}"
    with_items:
      - kubelet 
      - kubeadm 
      - kubectl

  - name: swapoff -a
    shell: swapoff -a
   
  - hostname:
      name: "{{ inventory_hostname }}"

  - name: update hosts file
    lineinfile:
      dest: /etc/hosts
      regexp: '^.*127.0.1.1.*'
      line: "127.0.1.1 {{ inventory_hostname }}.{{ domain }} {{ inventory_hostname }}"
      insertafter: '^.*127.0.0.1.*'
      state: present

- hosts: master
  tasks:
  
  - name: Stop service kubelet, if running
    service:
      name: kubelet
      state: stopped

  - name: kubeadm init
    shell: "kubeadm init --pod-network-cidr={{ cidr }} | grep 'kubeadm join'"
    register: join_token 
    #kubeadm join 10.15.76.83:6443 --token 5z6x1o.328f81fpb33fn3du --discovery-token-ca-cert-hash sha256:7ea486e2686d7ea9729f8478ac2c8933db1b8ba20d6b013f3dd74a8666dbbb55
  
  - copy:
      src: 'kube-flannel.yml'
      dest: '~/kube-flannel.yml'

  - file:
      dest: ~/.kube
      state: directory

  - shell: cp /etc/kubernetes/admin.conf ~/.kube/config
    become: true
    become_user: root

  - lineinfile:
      dest: ~/.profile
      insertbefore: '^mesg n || true'
      line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'

  - name: deploy network pod
    shell: 'kubectl  --kubeconfig .kube/config apply -f ~/kube-flannel.yml'
 
- hosts: worker
  tasks:
  
- name: join node to cluster
  shell: "{{ join_token.stdout }}"
  #shell: "{{ hostvars[groups['master'][0]]['join_token']['stdout'] }}"

- hosts: master
  tasks: 

  - copy:
      src: 'kube-dashboard.yml'
      dest: '~/kube-dashboard.yml'
 
  - name: install dashboard
    shell: 'kubectl --kubeconfig .kube/config apply -f ~/kube-dashboard.yml'
  
  - copy:
      src: 'admin-role.yml'
      dest: '~/admin-role.yml'

  - name: create dashboard user
    shell: 'kubectl --kubeconfig .kube/config create -f ~/admin-role.yml'
  
  - shell: "kubectl --kubeconfig .kube/config -n kube-system get secret | grep  -o -P 'admin-token-.{0,5}'"
    register: admin_token_name
    tags: abcde

  - name: Retreive admin token  
    shell: kubectl --kubeconfig .kube/config -n kube-system describe secret {{ admin_token_name.stdout }}
    register: admin_token

  - debug: 
      msg: | 
          Dashboard URL http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
          dashboard token {{ admin_token.stdout }}
          
          
### pro configuration
### cp /etc/kubernetes/admin.config  ## to kubctl client machine for remote access
